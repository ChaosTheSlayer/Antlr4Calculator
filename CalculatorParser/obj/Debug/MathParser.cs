//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\x1ucjk2\Documents\Visual Studio 2013\Projects\Antlr4Calculator\CalculatorParser\Math.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Math {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class MathParser : Parser {
	public const int
		NUMBER=1, INT=2, EXPONENT=3, MULTIPLY=4, DIVIDE=5, SUBTRACT=6, ADD=7, 
		LPAREN=8, RPAREN=9, WS=10;
	public static readonly string[] tokenNames = {
		"<INVALID>", "NUMBER", "INT", "'^'", "'*'", "'/'", "'-'", "'+'", "'('", 
		"')'", "WS"
	};
	public const int
		RULE_compileUnit = 0, RULE_expression = 1;
	public static readonly string[] ruleNames = {
		"compileUnit", "expression"
	};

	public override string GrammarFileName { get { return "Math.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MathParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MathParser.Eof, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathVisitor<TResult> typedVisitor = visitor as IMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4; expression(0);
			State = 5; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExponentContext : ExpressionContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EXPONENT() { return GetToken(MathParser.EXPONENT, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExponentContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.EnterExponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.ExitExponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathVisitor<TResult> typedVisitor = visitor as IMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveContext : ExpressionContext {
		public IToken operatorToken;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode SUBTRACT() { return GetToken(MathParser.SUBTRACT, 0); }
		public ITerminalNode ADD() { return GetToken(MathParser.ADD, 0); }
		public AdditiveContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.EnterAdditive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.ExitAdditive(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathVisitor<TResult> typedVisitor = visitor as IMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeContext : ExpressionContext {
		public IToken operatorToken;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MULTIPLY() { return GetToken(MathParser.MULTIPLY, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode DIVIDE() { return GetToken(MathParser.DIVIDE, 0); }
		public MultiplicativeContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.EnterMultiplicative(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.ExitMultiplicative(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathVisitor<TResult> typedVisitor = visitor as IMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedContext : ExpressionContext {
		public ITerminalNode RPAREN() { return GetToken(MathParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(MathParser.LPAREN, 0); }
		public ParenthesizedContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.EnterParenthesized(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.ExitParenthesized(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathVisitor<TResult> typedVisitor = visitor as IMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesized(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberContext : ExpressionContext {
		public ITerminalNode NUMBER() { return GetToken(MathParser.NUMBER, 0); }
		public NumberContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathVisitor<TResult> typedVisitor = visitor as IMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			switch (_input.La(1)) {
			case LPAREN:
				{
				_localctx = new ParenthesizedContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 8; Match(LPAREN);
				State = 9; expression(0);
				State = 10; Match(RPAREN);
				}
				break;
			case NUMBER:
				{
				_localctx = new NumberContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 12; Match(NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 26;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 24;
					switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
					case 1:
						{
						_localctx = new ExponentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 15;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 16; Match(EXPONENT);
						State = 17; expression(5);
						}
						break;

					case 2:
						{
						_localctx = new MultiplicativeContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 18;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 19;
						((MultiplicativeContext)_localctx).operatorToken = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==MULTIPLY || _la==DIVIDE) ) {
							((MultiplicativeContext)_localctx).operatorToken = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 20; expression(4);
						}
						break;

					case 3:
						{
						_localctx = new AdditiveContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 21;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 22;
						((AdditiveContext)_localctx).operatorToken = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==SUBTRACT || _la==ADD) ) {
							((AdditiveContext)_localctx).operatorToken = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 23; expression(3);
						}
						break;
					}
					} 
				}
				State = 28;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 4);

		case 1: return Precpred(_ctx, 3);

		case 2: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\f \x4\x2\t\x2\x4"+
		"\x3\t\x3\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x10"+
		"\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3\x1B\n"+
		"\x3\f\x3\xE\x3\x1E\v\x3\x3\x3\x2\x2\x3\x4\x4\x2\x2\x4\x2\x2\x4\x3\x2\x6"+
		"\a\x3\x2\b\t!\x2\x6\x3\x2\x2\x2\x4\xF\x3\x2\x2\x2\x6\a\x5\x4\x3\x2\a\b"+
		"\a\x2\x2\x3\b\x3\x3\x2\x2\x2\t\n\b\x3\x1\x2\n\v\a\n\x2\x2\v\f\x5\x4\x3"+
		"\x2\f\r\a\v\x2\x2\r\x10\x3\x2\x2\x2\xE\x10\a\x3\x2\x2\xF\t\x3\x2\x2\x2"+
		"\xF\xE\x3\x2\x2\x2\x10\x1C\x3\x2\x2\x2\x11\x12\f\x6\x2\x2\x12\x13\a\x5"+
		"\x2\x2\x13\x1B\x5\x4\x3\a\x14\x15\f\x5\x2\x2\x15\x16\t\x2\x2\x2\x16\x1B"+
		"\x5\x4\x3\x6\x17\x18\f\x4\x2\x2\x18\x19\t\x3\x2\x2\x19\x1B\x5\x4\x3\x5"+
		"\x1A\x11\x3\x2\x2\x2\x1A\x14\x3\x2\x2\x2\x1A\x17\x3\x2\x2\x2\x1B\x1E\x3"+
		"\x2\x2\x2\x1C\x1A\x3\x2\x2\x2\x1C\x1D\x3\x2\x2\x2\x1D\x5\x3\x2\x2\x2\x1E"+
		"\x1C\x3\x2\x2\x2\x5\xF\x1A\x1C";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Rubberduck.Math
